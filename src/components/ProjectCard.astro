---
import { SOURCE_CODE_URL } from "../scripts-ssr/constants";
import { getEnv } from "../scripts-ssr/env";
import { getLanguageColor } from "../scripts-ssr/languageColors";
import OpenExternalIcon from "./Icons/OpenExternalIcon.astro";

import Star from "./Icons/Star.astro";

export interface Props {
    repo: string;
}

const { repo } = Astro.props;

const requestInit = {
    headers: new Headers({
        "User-Agent": SOURCE_CODE_URL,
    }),
} satisfies RequestInit;

if (repo.includes("api.github.com")) {
    const env = import.meta.env;

    const token = getEnv(Astro.request, env, "GITHUB_TOKEN");

    requestInit.headers.set("Accept", "application/vnd.github.v3+json");
    requestInit.headers.set("Authorization", `Bearer ${token}`);
}

const data = await fetch(repo, requestInit).then(async r => {
    if (!r.ok) {
        const e = await r.text().catch(() => "Unknown Error");
        throw new Error(
            `Failed to fetch repo info for ${repo}: ${r.status} ${r.statusText}\n${e}`
        );
    }
    return r.json();
});

const {
    name,
    description,
    language,
    owner,
    stars_count,
    stargazers_count,
    html_url,
} = data;

const starCount = stars_count ?? stargazers_count;
const stars =
    starCount > 1000 ? `${(starCount / 1000).toFixed(1)}k` : starCount;

const avatarUrl = new URL(owner.avatar_url);
avatarUrl.searchParams.set("size", "64");
---

<a href={html_url}>
    <span class="open-external">
        <OpenExternalIcon />
    </span>

    <div class="author">
        <img src={avatarUrl.toString()} alt="" />
        <span>{owner.login}</span>
    </div>

    <h3>{name}</h3>
    <span class="description">{description}</span>

    <div class="info">
        <span
            class="language"
            style={`--lang-color: ${getLanguageColor(language)};`}
        >
            {language}
        </span>
        <div class="stars">
            <Star />
            <span>{stars}</span>
        </div>
    </div>
</a>

<style lang="scss">
    a {
        all: unset;
        cursor: pointer;

        position: relative;
        background: var(--surface2);
        border: 1px solid var(--color-semi-trans);
        padding: 1em;
        border-radius: 8px;
        display: grid;

        transition: 200ms box-shadow var(--box-shadow-transition),
            200ms background;
    }

    a:is(:hover, :active) {
        box-shadow: var(--box-shadow-stronger);
        background: var(--surface);
    }

    h3 {
        margin: 0;
    }

    span {
        font-size: 0.9em;
    }

    .description {
        margin-top: 0.3em;
        margin-bottom: 0.8em;
    }

    .author,
    .info,
    .stars {
        display: flex;
        align-items: center;
    }

    .author {
        margin-bottom: 1em;
    }

    .author img {
        width: 1.2em;
        height: 1.2em;
        border-radius: 50%;
        margin-right: 0.3em;
    }

    .info {
        line-height: 1.2em;
    }

    .stars :global(svg) {
        width: 1.2em;
        height: 1.2em;
        transform: translateY(-0.05em);
        margin-right: 0.1em;
    }

    .language {
        margin-right: 0.6em;
    }

    .language::before {
        content: "";
        display: inline-block;
        width: 0.8em;
        height: 0.8em;
        transform: translateY(0.05em);
        border-radius: 50%;
        background: var(--lang-color);
    }

    .open-external {
        all: unset;
        cursor: pointer;
        color: var(--color-semi-trans);
        position: absolute;
        top: 1em;
        right: 0.5em;
        transition: 200ms color;
    }

    .open-external :global(svg) {
        width: 1.2em;
        height: 1.2em;
    }
</style>
